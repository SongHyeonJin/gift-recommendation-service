name: CD - Deploy to EC2 (Main Only)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Create application-secret.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_SECRET_YML }}" > src/main/resources/application-secret.yml

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Save PEM key to file
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Copy artifacts to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no \
            build/libs/giftrecommender-0.0.1-SNAPSHOT.jar \
            src/main/resources/application-secret.yml \
            docker-compose.yml \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~

      - name: SSH into EC2 and deploy
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail

          # -------- inject secrets into remote session --------
          export EC2_HOST="${{ secrets.EC2_HOST }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export NAVER_CLIENT_ID="${{ secrets.NAVER_CLIENT_ID }}"
          export NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"

          echo "[INFO] Ensure Docker, Compose plugin, curl, Java"
          if ! command -v docker >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
            else
              sudo yum install -y docker
            fi
            sudo systemctl enable docker
            sudo systemctl start docker
          fi
          if ! sudo docker compose version >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get install -y docker-compose-plugin || true
            else
              sudo yum install -y docker-compose-plugin || true
            fi
          fi
          if ! command -v curl >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get install -y curl
            else
              sudo yum install -y curl
            fi
          fi
          if ! command -v java >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y openjdk-21-jre
            else
              sudo yum install -y java-21-amazon-corretto-headless || sudo dnf install -y java-21-openjdk
            fi
          fi

          # -------- Qdrant bring-up (idempotent) --------
          sudo mkdir -p /var/qdrant/storage
          cd "$HOME"

          if sudo docker ps --format '{{.Names}}' | grep -q '^qdrant$'; then
            echo "[INFO] Qdrant already running. Skipping compose up."
          else
            if sudo docker ps -a --format '{{.Names}}' | grep -q '^qdrant$'; then
              echo "[INFO] Qdrant container exists but not running. Starting..."
              sudo docker start qdrant
            else
              echo "[INFO] Qdrant not present. Bringing up via docker-compose.yml"
              sudo docker compose -f docker-compose.yml up -d
            fi

            echo "[INFO] Wait for Qdrant health"
            for i in {1..30}; do
              if curl -sf http://127.0.0.1:6333/healthz >/dev/null; then
                echo "[INFO] Qdrant healthy"
                break
              fi
              echo "[INFO] Waiting Qdrant... ($i/30)"
              sleep 2
              if [ "$i" -eq 30 ]; then
                echo "[ERROR] Qdrant did not become healthy"
                sudo docker ps
                sudo docker logs qdrant --tail=200 || true
                exit 1
              fi
            done
          fi

          echo "[INFO] Write application-secret.yml (template + envsubst)"
          cat > "$HOME/application-secret.yml.tmpl" <<'EOT'
          spring:
            config:
              activate:
                on-profile: prod
            datasource:
              url: jdbc:mysql://${EC2_HOST}:3306/gift_recommendation?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
              password: "${DB_PASSWORD}"
            redis:
              host: "${EC2_HOST}"
              port: 6379
          naver:
            client-id: "${NAVER_CLIENT_ID}"
            client-secret: "${NAVER_CLIENT_SECRET}"
          openai:
            api:
              key: "${OPENAI_API_KEY}"
          EOT

          # 변수 치환 적용
          envsubst < "$HOME/application-secret.yml.tmpl" > "$HOME/application-secret.yml"

          echo "[INFO] Stop existing Spring Boot application (if any)"
          PID=$(pgrep -f 'giftrecommender-0.0.1-SNAPSHOT.jar' || true)
          if [ -n "$PID" ]; then
            kill -15 $PID || true
            for i in {1..60}; do
              sleep 1
              if ! ps -p $PID >/dev/null; then
                echo "[INFO] Process $PID terminated"
                break
              fi
              if [ "$i" -eq 60 ]; then
                echo "[WARN] Force killing $PID"
                kill -9 $PID || true
              fi
            done
          else
            echo "[INFO] No existing process"
          fi

          echo "[INFO] Start Spring Boot (point to local Qdrant)"
          export QDRANT_HTTP_BASE_URL="http://127.0.0.1:6333"
          export QDRANT_GRPC_HOST="127.0.0.1"
          export QDRANT_GRPC_PORT="6334"

          nohup java -jar \
            -Dspring.profiles.active=prod \
            -Dspring.config.additional-location="$HOME/application-secret.yml" \
            "$HOME/giftrecommender-0.0.1-SNAPSHOT.jar" \
            > "$HOME/app.log" 2>&1 &

          echo "[INFO] Tail recent logs"
          tail -n 200 "$HOME/app.log" || true
          EOF
      

      - name: Clean up PEM key
        run: rm -f ec2_key.pem
